from typing import Any, Dict, List
from langchain_openai import OpenAIEmbeddings
from app.core.config import settings
import logging

logger = logging.getLogger(__name__)


class EmbeddingGenerationTool:
    """Tool for generating embeddings using OpenAI models."""

    def __init__(self, model: str = "text-embedding-3-small"):
        """
        Initialize the embedding manager with OpenAI embeddings.

        Args:
            model: OpenAI embedding model to use (default: text-embedding-3-small)
                   Options: text-embedding-3-small, text-embedding-3-large, text-embedding-ada-002
        """
        self.model = model

        # Validate OpenAI API key
        api_key = settings.OPENAI_API_KEY
        if not api_key:
            raise ValueError(
                "OPENAI_API_KEY environment variable is required. "
                "Please set your OpenAI API key in the .env file or environment variables."
            )

        self.embeddings = OpenAIEmbeddings(model=self.model, openai_api_key=api_key)

    def generate_embeddings(self, texts: List[str]) -> List[List[float]]:
        """
        Generate embeddings for a list of texts.

        Args:
            texts: List of text strings to embed

        Returns:
            List of embedding vectors

        Raises:
            ValueError: If embedding generation fails
        """
        try:
            if not texts:
                return []

            embeddings = self.embeddings.embed_documents(texts)
            return embeddings

        except Exception as e:
            raise ValueError(f"Failed to generate embeddings: {str(e)}")

    def generate_query_embedding(self, query: str) -> List[float]:
        """
        Generate embedding for a single query text.

        Args:
            query: Query text to embed

        Returns:
            Embedding vector for the query

        Raises:
            ValueError: If embedding generation fails
        """
        try:
            embedding = self.embeddings.embed_query(query)
            return embedding

        except Exception as e:
            raise ValueError(f"Failed to generate query embedding: {str(e)}")

    def get_embedding_dimension(self) -> int:
        """
        Get the dimension of embeddings generated by this tool.

        Returns:
            Embedding dimension
        """
        model_dimensions = {
            "text-embedding-3-small": 1536,
            "text-embedding-3-large": 3072,
            "text-embedding-ada-002": 1536,
        }

        return model_dimensions.get(self.model, 1536)


class EmbeddingAnalysisTool:
    """Tool for analyzing and validating embeddings."""

    def __init__(self):
        """Initialize the embedding analysis tool."""
        pass

    def analyze_embedding_quality(self, embedding: List[float]) -> Dict[str, Any]:
        """
        Analyze the quality of an embedding vector.

        Args:
            embedding: Embedding vector to analyze

        Returns:
            Analysis results
        """
        try:
            dimension = len(embedding)
            magnitude = sum(x * x for x in embedding) ** 0.5
            mean_value = sum(embedding) / dimension
            variance = sum((x - mean_value) ** 2 for x in embedding) / dimension

            return {
                "dimension": dimension,
                "magnitude": magnitude,
                "mean": mean_value,
                "variance": variance,
                "quality_score": min(1.0, magnitude / dimension**0.5),
            }

        except Exception as e:
            return {"error": f"Failed to analyze embedding: {str(e)}"}

    def validate_embedding_dimension(
        self, embedding: List[float], expected_dimension: int
    ) -> bool:
        """
        Validate that an embedding has the expected dimension.

        Args:
            embedding: Embedding vector to validate
            expected_dimension: Expected dimension

        Returns:
            True if dimension matches, False otherwise
        """
        return len(embedding) == expected_dimension
